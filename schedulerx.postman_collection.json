{
  "info": {
    "_postman_id": "e5b10b0c-9db7-4113-a6b3-8124ad112dbe",
    "name": "schedulerx",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "28504837"
  },
  "item": [
    {
      "name": "Get jobs for command id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}{{v1}}/jobs/command/:commandId",
          "host": [
            "{{baseUrl}}{{v1}}"
          ],
          "path": [
            "jobs",
            "command",
            ":commandId"
          ],
          "variable": [
            {
              "key": "commandId",
              "value": "{{commandId}}"
            }
          ]
        },
        "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
      },
      "response": []
    },
    {
      "name": "Register a new command",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful POST request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"schedule\": \"* * * * *\",\n    \"params\": [\n        \"PUSH\", \"PUSH\", \"PUSH\", \"SHOW\", \"POP\", \"SHOW\", \"POP\", \"POP\", \"SHOW\"\n    ],\n    \"type\": \"STACK\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}{{v1}}/commands",
          "host": [
            "{{baseUrl}}{{v1}}"
          ],
          "path": [
            "commands"
          ]
        },
        "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
      },
      "response": []
    },
    {
      "name": "Update an existing command",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful PUT request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"id\": \"3\",\n    \"schedule\": \"0 * * * *\",\n    \"params\": [\n        \"log1\",\n        \"log2\",\n        \"log3\",\n        \"log 4\"\n    ],\n    \"type\": \"LOGGER\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}{{v1}}/commands",
          "host": [
            "{{baseUrl}}{{v1}}"
          ],
          "path": [
            "commands"
          ]
        },
        "description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
      },
      "response": []
    },
    {
      "name": "Delete an existing command",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Successful DELETE request\", function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}{{v1}}/commands/:commandId",
          "host": [
            "{{baseUrl}}{{v1}}"
          ],
          "path": [
            "commands",
            ":commandId"
          ],
          "variable": [
            {
              "key": "commandId",
              "value": "{{commandId}}"
            }
          ]
        },
        "description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "v1",
      "value": "/api/v1",
      "type": "string"
    },
    {
      "key": "commandId",
      "value": "3",
      "type": "string"
    }
  ]
}